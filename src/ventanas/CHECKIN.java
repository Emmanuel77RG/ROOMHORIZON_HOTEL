/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ventanas;

import clases.Empleado;
import clases.Reservas;
import clases.ReservasManager;
import conexion.ReservasDAO;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Time;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author omara
 */
public class CHECKIN extends javax.swing.JFrame {

    /**
     * Creates new form CHECKIN
     */
    public CHECKIN(Empleado empleado) throws SQLException {
        this.empleado=empleado;
        initComponents();
        rellenarTabla();
        setSize(825, 519); //tama√±o de la interfaz
        setResizable(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nombreClienteTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservasCliente = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        REGRESAR = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(230, 213, 193));

        jLabel1.setFont(new java.awt.Font("Britannic Bold", 0, 24)); // NOI18N
        jLabel1.setText("PROCESO DE CHECK-IN");

        jLabel2.setText("Nombre del cliente");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/lupa (1).png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        reservasCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No. reserva", "Nombre", "Apellido", "Correo", "Numero", "Fecha entrada", "Fecha salida", "No. personas", "Notas", "No. habitacion", "Tipo habitacion"
            }
        ));
        jScrollPane1.setViewportView(reservasCliente);

        jButton2.setText("Registrar entrada");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/LOGO4.png"))); // NOI18N

        REGRESAR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/flecha-izquierda.png"))); // NOI18N
        REGRESAR.setText("Regresar");
        REGRESAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REGRESARActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nombreClienteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addGap(153, 153, 153)
                        .addComponent(REGRESAR, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(6, 6, 6))
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nombreClienteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(REGRESAR, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rellenarTabla() throws SQLException {
        listaReservas = new ArrayList<>();
        DefaultTableModel modelo = (DefaultTableModel) reservasCliente.getModel();
        modelo.setRowCount(0);
        reservasDAO = new ReservasDAO();
        listaReservas = reservasDAO.obtenerReservasConfirmadas(empleado);
        for (Reservas res : listaReservas) {
            Object[] fila = {
                res.getIdReserva(),
                res.getCliente().getNombre(),
                res.getCliente().getApellido(),
                res.getCliente().getCorreo(),
                res.getCliente().getNumero(),
                res.getFechaEntrada(),
                res.getFechaSalida(),
                res.getCantidadPersonas(),
                res.getNotas(),
                res.getHabitacion().getNumeroHabitacion(),
                res.getHabitacion().getTipoHabitacion()
            };
            modelo.addRow(fila);
        }

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Obtener el texto del campo de b√∫squeda y convertirlo a min√∫sculas
        String nombreCliente = nombreClienteTextField.getText().trim().toLowerCase();

        // Verificar que el campo de b√∫squeda no est√© vac√≠o
        if (nombreCliente.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese el nombre del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel modeloOriginal = (DefaultTableModel) reservasCliente.getModel();
        DefaultTableModel modeloFiltrado = new DefaultTableModel();

        // Copiar las columnas del modelo original al modelo filtrado
        for (int i = 0; i < modeloOriginal.getColumnCount(); i++) {
            modeloFiltrado.addColumn(modeloOriginal.getColumnName(i));
        }

        boolean hayCoincidencias = false;

        // Recorrer cada fila en el modelo original
        for (int i = 0; i < modeloOriginal.getRowCount(); i++) {
            // Obtener el valor de la celda en la columna "Nombre" (columna 1)
            String nombreFila = modeloOriginal.getValueAt(i, 1).toString().toLowerCase();

            // Verificar si el nombre de la fila contiene el texto ingresado
            if (nombreFila.contains(nombreCliente)) {
                Object[] fila = new Object[modeloOriginal.getColumnCount()];
                for (int j = 0; j < modeloOriginal.getColumnCount(); j++) {
                    fila[j] = modeloOriginal.getValueAt(i, j);
                }
                modeloFiltrado.addRow(fila);
                hayCoincidencias = true;
            }
        }

        // Actualizar la tabla con el modelo filtrado o mostrar mensaje de "sin coincidencias"
        if (hayCoincidencias) {
            reservasCliente.setModel(modeloFiltrado);
        } else {
            JOptionPane.showMessageDialog(null, "No hay reservas asociadas a tal cliente", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// Obtener el modelo de la tabla
        DefaultTableModel modelo = (DefaultTableModel) reservasCliente.getModel();
        filasSeleccionadas = new ArrayList<>();
        
        // Obtener las filas seleccionadas de la tabla
        int[] filas = reservasCliente.getSelectedRows();

        // Verificar que haya al menos una fila seleccionada
        if (filas.length == 0) {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione al menos una fila.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Limpiar la lista antes de almacenar las nuevas selecciones
        filasSeleccionadas.clear();

        // Recorrer las filas seleccionadas y almacenar sus valores en la lista de reservas seleccionadas
        for (int fila : filas) {
            // Obtener los valores de las columnas relevantes de la fila seleccionada
            Object idRESERVA = modelo.getValueAt(fila, 0);
            int idResCli = Integer.parseInt(String.valueOf(idRESERVA));

            Object nombreCli = modelo.getValueAt(fila, 1);
            String nombre = String.valueOf(nombreCli);

            Object apellidoCli = modelo.getValueAt(fila, 2);
            String apellido = String.valueOf(apellidoCli);

            Object numeroHAB = modelo.getValueAt(fila, 9);
            String numeroHab = String.valueOf(numeroHAB);

            // Buscar la reserva en el gestor de reservas
            reserva = ReservasManager.getInstance().buscarReserva(idResCli, nombre, apellido, numeroHab);

            
            
            // Agregar la reserva a la lista si se encontr√≥
            if (reserva != null) {
                filasSeleccionadas.add(reserva);
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo encontrar la reserva seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        try {
            // Invocar el m√©todo para registrar las entradas con las reservas seleccionadas
            actualizarReservas(filasSeleccionadas);
        } catch (SQLException ex) {
            Logger.getLogger(CHECKIN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void REGRESARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REGRESARActionPerformed
        this.dispose();
    }//GEN-LAST:event_REGRESARActionPerformed

    private void actualizarReservas(ArrayList<Reservas> reservasSeleccionadas) throws SQLException {
        Date ahora = new Date();

        // Darle formato a la hora actual
        SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm:ss");
        String horaFormateada = formatoHora.format(ahora);

        // Convertir la hora formateada al tipo Time de MySQL
        Time horaSQL = Time.valueOf(horaFormateada);
        StringBuilder mensaje = new StringBuilder();
        mensaje.append("Informaci√≥n de las reservas seleccionadas:\n");
        for (Reservas res : reservasSeleccionadas) {
            mensaje.append("Numero reserva: ").append(res.getIdReserva())
                    .append(", Cliente: ").append(res.getCliente().getNombre()).append(" ").append(res.getCliente().getApellido())
                    .append(", Habitaci√≥n: ").append(res.getHabitacion().getNumeroHabitacion()).append(" ").append(res.getHabitacion().getTipoHabitacion())
                    .append("\n");
        }
        mensaje.append("\nHora actual: ").append(horaFormateada);
        mensaje.append("\n¬øDesea confirmar la actualizaci√≥n de estas reservas?");
        int opcion = JOptionPane.showConfirmDialog(null, mensaje.toString(), "Confirmaci√≥n de Actualizaci√≥n", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        // Si el usuario confirma, llamar al m√©todo actualizarReservas
        if (opcion == JOptionPane.YES_OPTION) {
            reservasDAO = new ReservasDAO();
            for (Reservas res : reservasSeleccionadas) {
                reservasDAO.actualizarReservaClinte(res.getIdReserva(), res.getCliente().getId_cliente(), horaSQL);
            }
            JOptionPane.showMessageDialog(null, "Reservas actualizadas con √©xito.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
        }
            
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CHECKIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CHECKIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CHECKIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CHECKIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CHECKIN().setVisible(true);
//            }
//        });
//    }

    private Empleado empleado;
    private Reservas reserva;
    private ReservasDAO reservasDAO;
    private ArrayList<Reservas> listaReservas;
    private ArrayList<Reservas> filasSeleccionadas;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton REGRESAR;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreClienteTextField;
    private javax.swing.JTable reservasCliente;
    // End of variables declaration//GEN-END:variables
}
